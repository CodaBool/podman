on:
  schedule:
    - cron: "0 0 * * *" # daily
# on: push
jobs:
  release:
    # for when set to on: push | skips ci if the commit message contains "[no ci]"
    # if: "! contains(github.event.commits[0].message, '[no ci]')"
    runs-on: ubuntu-latest
    permissions:
      contents: write # required for github release
      packages: write
    steps:
      # https://github.com/marketplace/actions/checkout
      - name: Check if a new image has been pushed in the last 8 days
        run: |
          # get the latest stable version of Fedora
          # WARN: this does assume that you are running the current major version of Fedora
          LATEST_STABLE=$(curl -s https://builds.coreos.fedoraproject.org/streams/stable.json | jq -r '.architectures.x86_64.artifacts.metal.release')

          # get the latest release tag from the codabool/podman repository
          CURRENT_VERSION=$(curl -s https://api.github.com/repos/codabool/podman/releases/latest | jq -r '.tag_name')

          # WARN: assumes fedora will always use a date based minor version scheme
          function get_unix_time() {
            minor_version=$(echo "$1" | cut -d '.' -f2)
            unix_time=$(date -d "${minor_version:0:4}-${minor_version:4:2}-${minor_version:6:2}" '+%s')
            echo "$unix_time"
          }

          latest_unix="$(get_unix_time $LATEST_STABLE)"
          current_unix="$(get_unix_time $CURRENT_VERSION)"

          echo "latest Fedora: $LATEST_STABLE"
          echo "current Fedora: $CURRENT_VERSION"

          if [ "$latest_unix" -eq "$current_unix" ]; then
            echo "The latest stable version matches the current version. Nothing to do."
            exit 0
          fi
      - uses: actions/checkout@v4
      - uses: docker/setup-docker-action@v4
      - name: Build and push the bootc image
        run: |
          cd bootc
          docker build -t ghcr.io/codabool/fedora-bootc:latest .
          echo ${{ secrets.GH_TOKEN }} | docker login ghcr.io -u codabool --password-stdin
          docker push ghcr.io/codabool/fedora-bootc:latest
      - name: Gather info for release
        run: |
          IMAGE=$(docker buildx imagetools inspect ghcr.io/codabool/fedora-bootc:latest --format "{{json .Image}}")
          CREATED=$(echo $IMAGE | jq -r .created)
          LINUX_KERNAL=$(echo $IMAGE | jq -r '.config.Labels.["ostree.linux"]')
          DISTRO_VERSION=$(echo $IMAGE | jq -r '.config.Labels.["org.opencontainers.image.version"]')

          # Create short versions of variables
          DATE=$(echo $CREATED | cut -d'T' -f1)
          DISTRO=$(echo $DISTRO_VERSION | cut -d'.' -f1)
          LINUX=$(echo $LINUX_KERNAL | cut -d'-' -f1 | cut -d'.' -f1,2)

          echo "creating new iso with: kernal $LINUX | distro $DISTRO"

          # Set output variables for use in later steps
          echo "DISTRO=$DISTRO" >> $GITHUB_ENV
          echo "LINUX=$LINUX" >> $GITHUB_ENV
          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "DISTRO_VERSION=$DISTRO_VERSION" >> $GITHUB_ENV
          echo "LINUX_KERNAL=$LINUX_KERNAL" >> $GITHUB_ENV
      # https://github.com/ublue-os/bootc-image-builder-action
      - uses: centos-workstation/bootc-image-builder-action@main
        with:
          # Configuration file for the image builder.
          config-file: ./bootc/config.toml
          # Image (registry with tag) used in the artifact.
          image: ghcr.io/codabool/fedora-bootc:latest
      # https://github.com/marketplace/actions/upload-a-build-artifact
      - uses: actions/upload-artifact@v4
        id: artifact
        with:
          path: ./output/bootiso/install.iso
          name: "${{ env.DISTRO }}-${{ env.LINUX }}-${{ env.DATE }}"
          overwrite: true
      # https://github.com/marketplace/actions/gh-release

      # ===================================
      # !! releases can only be 2Gb max !!
      # and Fedora bootc comes out to 2.4Gb
      #  just link to the artifact instead
      # ===================================

      - uses: softprops/action-gh-release@v2
        with:
          # files: ./output/bootiso/install.iso
          make_latest: true
          tag_name: ${{ env.DISTRO_VERSION }}
          name: "Fedora ${{ env.DISTRO_VERSION }}"
          body: |
            Fedora Distro: ${{ env.DISTRO_VERSION }}
            Linux Kernel: ${{ env.LINUX_KERNAL }}
            Date Created: ${{ env.DATE }}

            [ISO Download Link](${{ steps.artifact.outputs.artifact-url }})

            This is an ISO which runs the kickstart file from `bootc/config.toml` and boots from the bootable container Image from `bootc/Dockerfile`
