on:
  schedule:
    - cron: "0 21 * * 1" # daily
# on: push
jobs:
  release:
    # for when set to on: push | skips ci if the commit message contains "[no ci]"
    # if: "! contains(github.event.commits[0].message, '[no ci]')"
    runs-on: ubuntu-latest
    permissions:
      contents: write # required for github release
      packages: write
    steps:
      # https://github.com/marketplace/actions/checkout
      - uses: actions/checkout@v4
      # https://github.com/marketplace/actions/docker-setup-docker
      - uses: docker/setup-docker-action@v4
      - name: Check for a new Fedora image
        id: check
        run: |
          # get the latest stable version of Fedora 42
          IMAGE=$(docker buildx imagetools inspect ghcr.io/codabool/fedora-bootc --format "{{json .Image}}")
          REMOTE_IMAGE=$(docker buildx imagetools inspect quay.io/fedora/fedora-bootc:42 --format "{{json .Image}}")
          LATEST_STABLE=$(echo $REMOTE_IMAGE | jq -r '.["linux/amd64"].config.Labels.["org.opencontainers.image.version"]')

          CURRENT_VERSION=$(echo $IMAGE | jq -r '.config.Labels.["org.opencontainers.image.version"]')

          # WARN: if this code is used for a non-Fedora distro, use a semver compare tool instead
          function get_unix_time() {
            minor_version=$(echo "$1" | cut -d '.' -f2)
            unix_time=$(date -d "${minor_version:0:4}-${minor_version:4:2}-${minor_version:6:2}" '+%s')
            echo "$unix_time"
          }

          latest_unix="$(get_unix_time $LATEST_STABLE)"
          current_unix="$(get_unix_time $CURRENT_VERSION)"

          echo "latest Fedora: $LATEST_STABLE"
          echo "current Fedora: $CURRENT_VERSION"

          if [ "$latest_unix" -eq "$current_unix" ]; then
            echo "The latest stable version matches the current version. Nothing to do."
            echo "exit=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # set env vars for release
          LINUX_KERNAL=$(echo $REMOTE_IMAGE | jq -r '.["linux/amd64"].config.Labels.["ostree.linux"]')
          DISTRO_VERSION=$(echo $REMOTE_IMAGE | jq -r '.["linux/amd64"].config.Labels.["org.opencontainers.image.version"]')
          DATE=$(echo $REMOTE_IMAGE | jq -r '.["linux/amd64"].created' | cut -d'T' -f1)
          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "DISTRO_VERSION=$DISTRO_VERSION" >> $GITHUB_ENV
          echo "LINUX_KERNAL=$LINUX_KERNAL" >> $GITHUB_ENV
      - name: Build and push the bootc image
        if: steps.check.outputs.exit != 'true'
        run: |
          cd bootc
          docker build -t ghcr.io/codabool/fedora-bootc:latest .
          echo ${{ secrets.GH_TOKEN }} | docker login ghcr.io -u codabool --password-stdin
          docker push ghcr.io/codabool/fedora-bootc:latest
          SHA=$(docker buildx imagetools inspect ghcr.io/codabool/fedora-bootc:latest --format "{{json .Manifest.Digest}}" | tr -d '"')
          echo "SHA=$SHA" >> $GITHUB_ENV

      # There is currently issues with bootc-image-builder
      # it often breaks due to upstream 503 errors
      # once things get more stable I'll enable auto ISO building

      # - name: Gather info for release
      #   run: |
      #     IMAGE=$(docker buildx imagetools inspect ghcr.io/codabool/fedora-bootc:latest --format "{{json .Image}}")
      #     CREATED=$(echo $IMAGE | jq -r .created)
      #     LINUX_KERNAL=$(echo $IMAGE | jq -r '.config.Labels.["ostree.linux"]')
      #     DISTRO_VERSION=$(echo $IMAGE | jq -r '.config.Labels.["org.opencontainers.image.version"]')

      #     # Create short versions of variables
      #     DATE=$(echo $CREATED | cut -d'T' -f1)
      #     DISTRO=$(echo $DISTRO_VERSION | cut -d'.' -f1)
      #     LINUX=$(echo $LINUX_KERNAL | cut -d'-' -f1 | cut -d'.' -f1,2)

      #     echo "creating new iso with: kernal $LINUX | distro $DISTRO"

      #     # Set output variables for use in later steps
      #     echo "DISTRO=$DISTRO" >> $GITHUB_ENV
      #     echo "LINUX=$LINUX" >> $GITHUB_ENV
      #     echo "DATE=$DATE" >> $GITHUB_ENV
      #     echo "DISTRO_VERSION=$DISTRO_VERSION" >> $GITHUB_ENV
      #     echo "LINUX_KERNAL=$LINUX_KERNAL" >> $GITHUB_ENV
      # # https://github.com/ublue-os/bootc-image-builder-action
      # - uses: centos-workstation/bootc-image-builder-action@main
      #   with:
      #     # Configuration file for the image builder.
      #     config-file: ./bootc/config.toml
      #     # Image (registry with tag) used in the artifact.
      #     image: ghcr.io/codabool/fedora-bootc:latest
      # # https://github.com/marketplace/actions/upload-a-build-artifact
      # - uses: actions/upload-artifact@v4
      #   id: artifact
      #   with:
      #     path: ./output/bootiso/install.iso
      #     name: "{{ env.DISTRO }}-{{ env.LINUX }}-{{ env.DATE }}"
      #     overwrite: true
      # # https://github.com/marketplace/actions/gh-release

      # # ===================================
      # # !! releases can only be 2Gb max !!
      # # and Fedora bootc comes out to 2.4Gb
      # #  just link to the artifact instead
      # # ===================================
      # [ISO Download Link]({{ steps.artifact.outputs.artifact-url }})
      # This is an ISO which runs the kickstart file from `bootc/config.toml` and boots from the bootable container Image from `bootc/Dockerfile`
      - uses: softprops/action-gh-release@v2
        if: steps.check.outputs.exit != 'true'
        with:
          # files: ./output/bootiso/install.iso
          make_latest: true
          tag_name: ${{ env.DISTRO_VERSION }}
          name: "Fedora ${{ env.DISTRO_VERSION }}"
          body: |
            Fedora Distro: ${{ env.DISTRO_VERSION }}
            Linux Kernel: ${{ env.LINUX_KERNAL }}
            Date Created: ${{ env.DATE }}

            [actions](https://github.com/CodaBool/podman/actions)

            [${{ env.SHA }}](https://github.com/CodaBool/podman/pkgs/container/fedora-bootc/versions)

            [Package Link](https://github.com/CodaBool/podman/pkgs/container/fedora-bootc)
